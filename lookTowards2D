    Vector3 myLocation = transform.position;
    Vector3 targetLocation = path.lookPoints[pathIndex];
    targetLocation.z = myLocation.z; // ensure there is no 3D rotation by aligning Z position
     
    // vector from this object towards the target location
    Vector3 vectorToTarget = targetLocation - myLocation;
    // rotate that vector by 90 degrees around the Z axis
    Vector3 rotatedVectorToTarget = Quaternion.Euler(0, 0, 90) * vectorToTarget;
     
    // get the rotation that points the Z axis forward, and the Y axis 90 degrees away from the target
    // (resulting in the X axis facing the target)
    Quaternion targetRotation = Quaternion.LookRotation(forward: Vector3.forward, upwards: rotatedVectorToTarget);
     
    // changed this from a lerp to a RotateTowards because you were supplying a "speed" not an interpolation value
    transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, turnSpeed * Time.deltaTime);
    transform.Translate(Vector3.right * speed * Time.deltaTime, Space.Self);
